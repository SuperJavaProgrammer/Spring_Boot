# JPA
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true

# H2-Console: http://localhost:8080/h2-console
# jdbc:h2:mem:testdb
spring.h2.console.enabled=true

## REST
#spring.data.rest.base-path=api

## Logging //установить и перейти на http://localhost:8080/actuator/loggers/com.apress.todo, то увидим {"configuredLevel": DEBUG,"effectiveLevel": "DEBUG”}
#logging.level.com.apress.todo=DEBUG

# Actuator INFO /actuator/info
spring.application.name=todo-actuator
info.application-name=${spring.application.name}
info.developer.name=Awesome Developer
info.developer.email=awesome@example.com

# Actuator открыть/закрыть веб-доступ доступ к конечным точкам. Их можно перечислять по отдельности, разделенные запятыми, либо включить все с помощью *
management.endpoints.web.exposure.include=*
#management.endpoints.web.exposure.exclude=
#management.endpoints.enabled-by-default=true
# открыть/закрыть доступ к конечным точкам через JMX. По умолчанию все конечные точки доступны черезJMX
#anagement.endpoints.jmx.exposure.include=
#management.endpoints.jmx.exposure.exclud=
# сделать точку доступа активной
#management.endpoint.<НАЗВАНИЕ_К0НЕЧН0Й_Т0ЧКИ>.enabled=true
#management.endpoint.shutdown.enabled=true

## Server //поменять адрес сервера, добавить SSL, использовать какой-либо конкретный IP-адрес или поменять порт для конечных точек
#management.server.servlet.context-path=/yeap
#management.server.address=127.0.0.1
#management.server.port=8081
#У этой конфигурации есть своя конечная точка с context-path вида /admin/actuator/<название_конечной_точки>. При этом используется порт 8081 (это значит, что прослушивается два порта: 8080 для приложения и 8081 для конечных точек управления). Конечные точки управления привязаны к адресу 127.0.0.1.

## Disable all Endpoints //Отключить конечные точки (из соображений безопасности)
# Option 1
#management.endpoints.enabled-by-default=true
# or Option 2
#management.server.port=-1

## Cache //изменить кэш /actuator/beans
#management.endpoint.beans.cache.time-to-live=10s

## Health: Show details //Чтобы получить дополнительную информацию о других подсистемах
management.endpoint.health.show-details=always

## Replace the main /actuator/* base-path for /admin/** //Поменять путь контекста управления, чтобы не было /actuator
#management.endpoints.web.base-path=/admin

## Expose by Name
#management.endpoints.web.expose=beans,info,health

## Details on the health endpoint:
#management.endpoint.health.show-details=true

## Enable CORS //настроить совместное использование ресурсов между разными источниками (Cross-Origin Resource Sharing, CORS), позволяющее указывать, каким доменам разрешено задействовать конечную точку актуатора. очень похоже на использование аннотации @CrossOrigin(origins = "http://localhost:9000")
#management.endpoints.web.cors.allowed-origins=http://mydomain.com
#management.endpoints.web.cors.allowed-methods=GET, POST

## Change Endpoint Name/Id: /actuator/beans  -->  /actuator/ohmy //настроить идентификатор конечной точки, изменив таким образом ее название
#management.endpoints.web.path-mapping.beans=ohmy
#management.endpoints.web.path-mapping.<название_конечной_точки>=<новое_название>

## SHUTDOWN : curl -X POST localhost:8080/actuator/shutdown
#management.endpoint.shutdown.enabled=true

## ToDo
#todo.path=/tmp/todo
todo.path=C:\\tmp\\todo

## настраивать порядок отображения состояния/серьезности проблемы (например, уровень журналирования)
#management.health.status.order=FATAL, DOWN, OUT_OF_SERVICE, UNKNOWN, UP
#Свой собственный код состояния можно использовать с
#management.health.status.http-mapping.FATAL=503